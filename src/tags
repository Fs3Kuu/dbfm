!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
API	api.h	15;"	d
API_H	api.h	11;"	d
ARRLEN	util.h	17;"	d
ARTIST	fm.c	44;"	d	file:
AT	log.h	18;"	d
BEGIN_WITH	util.h	13;"	d
BUFSIZE	play.c	95;"	d	file:
CFG_FILE	config.h	16;"	d
CFG_PATH	config.h	15;"	d
CHANNEL_API	channel.h	16;"	d
CHANNEL_DEF	channel.h	15;"	d
CHANNEL_FILE	channel.h	17;"	d
CHANNEL_H	channel.h	11;"	d
CMD_BAN	api.h	/^	CMD_BAN 	= 0x62,$/;"	e	enum:cmd_type
CMD_INITPL	api.h	/^	CMD_INITPL 	= 0x6E,$/;"	e	enum:cmd_type
CMD_LOVE	api.h	/^	CMD_LOVE 	= 0x72,$/;"	e	enum:cmd_type
CMD_NEXT	api.h	/^	CMD_NEXT 	= 0x65,$/;"	e	enum:cmd_type
CMD_REFRESH	api.h	/^	CMD_REFRESH 	= 0x70,$/;"	e	enum:cmd_type
CMD_SKIP	api.h	/^	CMD_SKIP 	= 0x73,$/;"	e	enum:cmd_type
CMD_UNKNOW	api.h	/^	CMD_UNKNOW,$/;"	e	enum:cmd_type
CMD_UNLOEV	api.h	/^	CMD_UNLOEV 	= 0x75,$/;"	e	enum:cmd_type
COLOR_CODE	log.h	36;"	d
COLOR_END	log.h	38;"	d
COLOR_MAP	log.h	/^COLOR_MAP(XX)$/;"	e	enum:color_types
COLOR_MAP	log.h	20;"	d
COLOR_START	log.h	37;"	d
CONFIG_H	config.h	11;"	d
END_WITH	http.h	24;"	d
END_WITH	util.h	14;"	d
EQUAL	util.h	15;"	d
FMT	screen_playlist.c	20;"	d	file:
FM_H	fm.h	11;"	d
HANDLER_H	handler.h	11;"	d
HASH_H	hash.h	11;"	d
HEADER_FORMAT	http.h	18;"	d
HTTP_H	http.h	11;"	d
INPUT_PASSWORD	util.h	/^	INPUT_PASSWORD,$/;"	e	enum:input_type
INPUT_TEXT	util.h	/^	INPUT_TEXT = 0,$/;"	e	enum:input_type
INPUT_UNKNOW	util.h	/^	INPUT_UNKNOW,$/;"	e	enum:input_type
LOG_H	log.h	11;"	d
LOVE	fm.c	42;"	d	file:
MAX	util.h	16;"	d
MSG2_FILE	log.h	14;"	d
MSG2_TERM	log.h	13;"	d
MSG_MAP	log.h	/^    	MSG_MAP(XX)$/;"	e	enum:msg_types
MSG_MAP	log.h	47;"	d
MSG_UNKNOW	log.h	/^    	MSG_UNKNOW$/;"	e	enum:msg_types
PID_FILE	main.c	27;"	d	file:
PLAYLIST_API	playlist.h	13;"	d
PLAYLIST_H	playlist.h	11;"	d
PLAY_h	play.h	11;"	d
SCREEN_H	screen.h	11;"	d
SESSION_API	session.h	15;"	d
SESSION_FILE	session.h	17;"	d
SESSION_H	session.h	11;"	d
SESSION_POST	session.h	16;"	d
SID	fm.c	40;"	d	file:
START_WITH	http.h	23;"	d
STR	log.h	17;"	d
STR2	log.h	16;"	d
TITLE	fm.c	43;"	d	file:
URL	fm.c	41;"	d	file:
USERAGENT	http.h	16;"	d
UTIL_H	util.h	11;"	d
XX	log.c	24;"	d	file:
XX	log.c	26;"	d	file:
XX	log.c	34;"	d	file:
XX	log.c	36;"	d	file:
XX	log.c	43;"	d	file:
XX	log.c	45;"	d	file:
XX	log.h	30;"	d
XX	log.h	32;"	d
XX	log.h	59;"	d
XX	log.h	61;"	d
_DEBUG	log.h	76;"	d
_DEBUG	log.h	78;"	d
_ERROR	log.h	73;"	d
_INFO	log.h	71;"	d
_WARN	log.h	72;"	d
___MSG	log.h	42;"	d
___MSG	log.h	44;"	d
ack	fm.c	/^static char ack = CMD_NEXT;$/;"	v	file:
api_send_request	api.c	/^char **api_send_request(enum cmd_type type, int sid, char *history)$/;"	f	signature:(enum cmd_type type, int sid, char *history)
api_send_request	api.h	/^char **api_send_request(enum cmd_type type, int sid, char *history);$/;"	p	signature:(enum cmd_type type, int sid, char *history)
arridx	util.c	/^int arridx(const char **arr, char *value)$/;"	f	signature:(const char **arr, char *value)
arridx	util.h	/^int arridx(const char **arr, char *value);$/;"	p	signature:(const char **arr, char *value)
callback	util.c	/^	void (*callback)(void *);$/;"	m	struct:looparg	file:	access:public
canon	util.c	/^void canon(int enable)$/;"	f	signature:(int enable)
canon	util.h	/^void canon(int enable);$/;"	p	signature:(int enable)
channels	channel.c	/^void channels(struct hash ***arr)$/;"	f	signature:(struct hash ***arr)
channels	channel.h	/^void channels(struct hash ***arr);$/;"	p	signature:(struct hash ***arr)
channels_parse	channel.c	/^static void channels_parse(struct hash ***arr, struct json_object *obj)$/;"	f	file:	signature:(struct hash ***arr, struct json_object *obj)
channels_parse	channel.c	/^static void channels_parse(struct hash ***arr, struct json_object *obj);$/;"	p	file:	signature:(struct hash ***arr, struct json_object *obj)
cleanup	hash.c	/^void cleanup(struct hash **ptr)$/;"	f	signature:(struct hash **ptr)
cleanup	hash.h	/^void cleanup(struct hash **ptr);$/;"	p	signature:(struct hash **ptr)
cmd_type	api.h	/^enum cmd_type$/;"	g
color_types	log.h	/^enum color_types$/;"	g
current	fm.c	/^static struct hash **current;$/;"	v	typeref:struct:hash	file:
current	screen.c	/^static screen_t *current = scr_help;$/;"	v	file:
daemonize	main.c	/^static void daemonize(const char *log, const char *err)$/;"	f	file:	signature:(const char *log, const char *err)
daemonize	main.c	/^static void daemonize(const char *log, const char *err);$/;"	p	file:	signature:(const char *log, const char *err)
data	util.c	/^	void *data;$/;"	m	struct:looparg	file:	access:public
delete	hash.c	/^void delete(struct hash ***arr, const char *key)$/;"	f	signature:(struct hash ***arr, const char *key)
device	play.h	/^	ao_device *device;$/;"	m	struct:stream	access:public
die	log.c	/^void die(const char *format, ...)$/;"	f	signature:(const char *format, ...)
die	log.h	/^void die(const char *format, ...);$/;"	p	signature:(const char *format, ...)
dl_thread	fm.c	/^static void *dl_thread(void *data)$/;"	f	file:	signature:(void *data)
dl_thread	fm.c	/^static void *dl_thread(void *data);$/;"	p	file:	signature:(void *data)
driver_id	play.h	/^	int driver_id;$/;"	m	struct:stream	access:public
duration	util.c	/^void duration(void *data, void (*func)(void *), int nsec)$/;"	f	signature:(void *data, void (*func)(void *), int nsec)
duration	util.h	/^void duration(void *data, void (*func)(void *), int nsec);$/;"	p	signature:(void *data, void (*func)(void *), int nsec)
email	config.h	/^	char email[32], password[32];$/;"	m	struct:user	access:public
execmd	handler.c	/^static void execmd(char *line, char *reply, int size)$/;"	f	file:	signature:(char *line, char *reply, int size)
execmd	handler.c	/^static void execmd(char *line, char *reply, int size);$/;"	p	file:	signature:(char *line, char *reply, int size)
fetch	http.c	/^char **fetch(const char *url, FILE **handle, const char *post, const char *type)$/;"	f	signature:(const char *url, FILE **handle, const char *post, const char *type)
fetch	http.h	/^char **fetch(const char *url, FILE **handle, const char *post, const char *type);$/;"	p	signature:(const char *url, FILE **handle, const char *post, const char *type)
fm_ban	fm.c	/^void fm_ban()$/;"	f
fm_ban	fm.h	/^void fm_ban();$/;"	p	signature:()
fm_channel	fm.c	/^void fm_channel()$/;"	f
fm_channel	fm.h	/^void fm_channel();$/;"	p	signature:()
fm_download	fm.c	/^void fm_download()$/;"	f
fm_download	fm.h	/^void fm_download();$/;"	p	signature:()
fm_list	fm.c	/^void fm_list()$/;"	f
fm_list	fm.h	/^void fm_list();$/;"	p	signature:()
fm_love	fm.c	/^int fm_love(struct playlist *pl)$/;"	f	signature:(struct playlist *pl)
fm_love	fm.h	/^int fm_love();$/;"	p	signature:()
fm_next	fm.c	/^void fm_next()$/;"	f
fm_next	fm.h	/^void fm_next();$/;"	p	signature:()
fm_playlist	fm.c	/^const struct playlist *fm_playlist()$/;"	f
fm_playlist	fm.h	/^const struct playlist *fm_playlist();$/;"	p	signature:()
fm_recording	fm.c	/^int fm_recording()$/;"	f
fm_recording	fm.h	/^int fm_recording();$/;"	p	signature:()
fm_run	fm.c	/^void fm_run(struct playlist *pl)$/;"	f	signature:(struct playlist *pl)
fm_run	fm.h	/^void fm_run(struct playlist *pl);$/;"	p	signature:(struct playlist *pl)
fm_skip	fm.c	/^void fm_skip()$/;"	f
fm_skip	fm.h	/^void fm_skip();$/;"	p	signature:()
fm_stop	fm.c	/^void fm_stop()$/;"	f
fm_stop	fm.h	/^void fm_stop();$/;"	p	signature:()
fm_track	fm.c	/^const struct hash **fm_track()$/;"	f
fm_track	fm.h	/^const struct hash **fm_track();$/;"	p	signature:()
fm_unlove	fm.c	/^int fm_unlove()$/;"	f
fm_unlove	fm.h	/^int fm_unlove();$/;"	p	signature:()
fmt	play.h	/^	ao_sample_format fmt;$/;"	m	struct:stream	access:public
fp	play.h	/^	FILE *fp;$/;"	m	struct:stream	access:public
free_response	http.c	/^void free_response(char **ptr)$/;"	f	signature:(char **ptr)
free_response	http.h	/^void free_response(char **ptr);$/;"	p	signature:(char **ptr)
from_hex	http.c	/^static char from_hex(char ch)$/;"	f	file:	signature:(char ch)
from_hex	http.c	/^static char from_hex(char ch);$/;"	p	file:	signature:(char ch)
fshutdown	http.c	/^static void fshutdown(FILE **fp)$/;"	f	file:	signature:(FILE **fp)
fshutdown	http.c	/^static void fshutdown(FILE **fp);$/;"	p	file:	signature:(FILE **fp)
handle	handler.c	/^void handle(int listenfd)$/;"	f	signature:(int listenfd)
handle	handler.h	/^void handle(int listenfd);$/;"	p	signature:(int listenfd)
handle_client	handler.c	/^static void handle_client(int fd)$/;"	f	file:	signature:(int fd)
handle_client	handler.c	/^static void handle_client(int fd);$/;"	p	file:	signature:(int fd)
handle_screen	screen.c	/^void handle_screen()$/;"	f
handle_screen	screen.h	/^void handle_screen();$/;"	p	signature:()
hash	hash.h	/^struct hash$/;"	s
hash::key	hash.h	/^	char *key;$/;"	m	struct:hash	access:public
hash::value	hash.h	/^	char *value;$/;"	m	struct:hash	access:public
help	screen_help.c	/^const char *help[] = $/;"	v
history	playlist.h	/^	struct hash **history;$/;"	m	struct:playlist	typeref:struct:playlist::hash	access:public
input	play.c	/^static enum mad_flow input(void *data, struct mad_stream *stream)$/;"	f	file:	signature:(void *data, struct mad_stream *stream)
input	play.c	/^static enum mad_flow input(void *data, struct mad_stream *stream);$/;"	p	file:	signature:(void *data, struct mad_stream *stream)
input_type	util.h	/^enum input_type$/;"	g
key	hash.h	/^	char *key;$/;"	m	struct:hash	access:public
length	hash.c	/^int length(const struct hash **arr)$/;"	f	signature:(const struct hash **arr)
length	hash.h	/^int length(const struct hash **arr);$/;"	p	signature:(const struct hash **arr)
length	playlist.h	/^	int length;$/;"	m	struct:playlist	access:public
list	fm.c	/^static struct playlist *list;$/;"	v	typeref:struct:playlist	file:
list	playlist.h	/^	struct tracknode *list;$/;"	m	struct:playlist	typeref:struct:playlist::tracknode	access:public
loadcfg	config.c	/^void loadcfg(struct hash ***arr, const char *file)$/;"	f	signature:(struct hash ***arr, const char *file)
loadcfg	config.h	/^void loadcfg(struct hash ***arr, const char *file);$/;"	p	signature:(struct hash ***arr, const char *file)
long_options	main.c	/^const struct option long_options[] = $/;"	v	typeref:struct:option
loop	util.c	/^static inline void *loop(void *arg);$/;"	p	file:	signature:(void *arg)
loop	util.c	/^static inline void *loop(void *data)$/;"	f	file:	signature:(void *data)
looparg	util.c	/^struct looparg$/;"	s	file:
looparg::callback	util.c	/^	void (*callback)(void *);$/;"	m	struct:looparg	file:	access:public
looparg::data	util.c	/^	void *data;$/;"	m	struct:looparg	file:	access:public
looparg::nsec	util.c	/^	int nsec;$/;"	m	struct:looparg	file:	access:public
main	main.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
mkcfg	config.c	/^void mkcfg(const struct hash **arr, const char *filename)$/;"	f	signature:(const struct hash **arr, const char *filename)
mkcfg	config.h	/^void mkcfg(const struct hash **arr, const char *filename);$/;"	p	signature:(const struct hash **arr, const char *filename)
msg_color	log.c	/^int msg_color[] = $/;"	v
msg_out	log.c	/^int msg_out[] =$/;"	v
msg_prefix	log.c	/^char *msg_prefix[] =$/;"	v
msg_types	log.h	/^enum msg_types$/;"	g
next	playlist.h	/^	struct tracknode *next;$/;"	m	struct:tracknode	typeref:struct:tracknode::tracknode	access:public
nsec	util.c	/^	int nsec;$/;"	m	struct:looparg	file:	access:public
opl	screen_playlist.c	/^static struct playlist opl, *pl = &opl;$/;"	v	typeref:struct:playlist	file:
output	play.c	/^static enum mad_flow output(void *data, const struct mad_header *header, struct mad_pcm *pcm)$/;"	f	file:	signature:(void *data, const struct mad_header *header, struct mad_pcm *pcm)
output	play.c	/^static enum mad_flow output(void *data, const struct mad_header *header, struct mad_pcm *pcm);$/;"	p	file:	signature:(void *data, const struct mad_header *header, struct mad_pcm *pcm)
password	config.h	/^	char email[32], password[32];$/;"	m	struct:user	access:public
pl	screen_playlist.c	/^static struct playlist opl, *pl = &opl;$/;"	v	typeref:struct:	file:
pl_current	playlist.c	/^const struct hash **pl_current(struct playlist *pl)$/;"	f	signature:(struct playlist *pl)
pl_current	playlist.h	/^const struct hash **pl_current(struct playlist *pl);$/;"	p	signature:(struct playlist *pl)
pl_destroy	playlist.c	/^void pl_destroy(struct playlist *pl)$/;"	f	signature:(struct playlist *pl)
pl_destroy	playlist.h	/^void pl_destroy(struct playlist *pl);$/;"	p	signature:(struct playlist *pl)
pl_hist2str	playlist.c	/^static char *pl_hist2str(const struct hash **history, char *buf)$/;"	f	file:	signature:(const struct hash **history, char *buf)
pl_hist2str	playlist.c	/^static char *pl_hist2str(const struct hash **history, char *buf);$/;"	p	file:	signature:(const struct hash **history, char *buf)
pl_history	playlist.c	/^void pl_history(struct playlist *pl, enum cmd_type type, int sid)$/;"	f	signature:(struct playlist *pl, enum cmd_type type, int sid)
pl_history	playlist.h	/^void pl_history(struct playlist *pl, enum cmd_type type, int sid);$/;"	p	signature:(struct playlist *pl, enum cmd_type type, int sid)
pl_load	playlist.c	/^static void pl_load(struct playlist *pl)$/;"	f	file:	signature:(struct playlist *pl)
pl_load	playlist.c	/^static void pl_load(struct playlist *pl);$/;"	p	file:	signature:(struct playlist *pl)
pl_preview	playlist.c	/^void pl_preview(struct playlist *pl)$/;"	f	signature:(struct playlist *pl)
pl_preview	playlist.h	/^void pl_preview(struct playlist *pl); $/;"	p	signature:(struct playlist *pl)
play	play.c	/^void play(const char *location, const char *driver)$/;"	f	signature:(const char *location, const char *driver)
play	play.h	/^void play(const char *url, const char *driver);$/;"	p	signature:(const char *url, const char *driver)
playlist	playlist.h	/^struct playlist$/;"	s
playlist::history	playlist.h	/^	struct hash **history;$/;"	m	struct:playlist	typeref:struct:playlist::hash	access:public
playlist::length	playlist.h	/^	int length;$/;"	m	struct:playlist	access:public
playlist::list	playlist.h	/^	struct tracknode *list;$/;"	m	struct:playlist	typeref:struct:playlist::tracknode	access:public
playlist::position	playlist.h	/^	int position;$/;"	m	struct:playlist	access:public
playproc	fm.c	/^static pid_t playproc = 0;$/;"	v	file:
position	playlist.h	/^	int position;$/;"	m	struct:playlist	access:public
position	screen_help.c	/^static int position;$/;"	v	file:
position	screen_playlist.c	/^static int position;$/;"	v	file:
prmsg	log.c	/^void prmsg(enum msg_types msg_type, const char *format, ...)$/;"	f	signature:(enum msg_types msg_type, const char *format, ...)
prmsg	log.h	/^void prmsg(enum msg_types msg_type, const char *format, ...);$/;"	p	signature:(enum msg_types msg_type, const char *format, ...)
prompt	util.c	/^void prompt(const char *text, char *save, int size, enum input_type type)$/;"	f	signature:(const char *text, char *save, int size, enum input_type type)
prompt	util.h	/^void prompt(const char *text, char *save, int size, enum input_type type);$/;"	p	signature:(const char *text, char *save, int size, enum input_type type)
rc	main.c	/^struct hash **rc;$/;"	v	typeref:struct:hash
read_response	http.c	/^static char **read_response(FILE *fp)$/;"	f	file:	signature:(FILE *fp)
read_response	http.c	/^static char **read_response(FILE *fp);$/;"	p	file:	signature:(FILE *fp)
reset	hash.c	/^void reset(struct hash ***arr, const char *key, const char *value)$/;"	f	signature:(struct hash ***arr, const char *key, const char *value)
reset	hash.h	/^void reset(struct hash ***arr, const char *key, const char *value);$/;"	p	signature:(struct hash ***arr, const char *key, const char *value)
ropen	http.c	/^static FILE *ropen(const char *host, unsigned short port, int timeout)$/;"	f	file:	signature:(const char *host, unsigned short port, int timeout)
ropen	http.c	/^static FILE *ropen(const char *host, unsigned short port, int timeout);$/;"	p	file:	signature:(const char *host, unsigned short port, int timeout)
safe_exit	main.c	/^static void safe_exit()$/;"	f	file:
safe_exit	main.c	/^static void safe_exit();$/;"	p	file:
scale	play.c	/^static inline signed scale(register mad_fixed_t sample)$/;"	f	file:	signature:(register mad_fixed_t sample)
scale	play.c	/^static inline signed scale(register mad_fixed_t sample);$/;"	p	file:	signature:(register mad_fixed_t sample)
scr_destroy	screen.c	/^void scr_destroy()$/;"	f
scr_destroy	screen.h	/^void scr_destroy();$/;"	p	signature:()
scr_help	screen.h	/^void scr_help(void *args);$/;"	p	signature:(void *args)
scr_help	screen_help.c	/^void scr_help(void *args)$/;"	f	signature:(void *args)
scr_load	screen.c	/^void scr_load(screen_t *screen, void *args)$/;"	f	signature:(screen_t *screen, void *args)
scr_load	screen.h	/^void scr_load(screen_t *screen, void *args);$/;"	p	signature:(screen_t *screen, void *args)
scr_playlist	screen.h	/^void scr_playlist(void *args);$/;"	p	signature:(void *args)
scr_playlist	screen_playlist.c	/^void scr_playlist(void *args)$/;"	f	signature:(void *args)
scr_putline	screen.c	/^void scr_putline(unsigned line, char ch, unsigned start, unsigned end, int attr, int color)$/;"	f	signature:(unsigned line, char ch, unsigned start, unsigned end, int attr, int color)
scr_putline	screen.h	/^void scr_putline(unsigned line, char ch, unsigned start, unsigned end, int attr, int color);$/;"	p	signature:(unsigned line, char ch, unsigned start, unsigned end, int attr, int color)
scr_scroll_help	screen.h	/^void scr_scroll_help(int i);$/;"	p	signature:(int i)
scr_scroll_help	screen_help.c	/^void scr_scroll_help(int i)$/;"	f	signature:(int i)
scr_scroll_pl	screen.h	/^void scr_scroll_pl(int i);$/;"	p	signature:(int i)
scr_scroll_pl	screen_playlist.c	/^void scr_scroll_pl(int i)$/;"	f	signature:(int i)
scr_setup	screen.c	/^void scr_setup()$/;"	f
scr_setup	screen.h	/^void scr_setup();$/;"	p	signature:()
scr_track	screen.h	/^void scr_track(void *args);$/;"	p	signature:(void *args)
scr_track	screen_track.c	/^void scr_track(void *args)$/;"	f	signature:(void *args)
scr_track	screen_track.h	/^void scr_track(void *args)$/;"	f	signature:(void *args)
screen_t	screen.h	/^typedef void (screen_t)(void *);$/;"	t
session	api.c	/^static struct hash ***session = &token;$/;"	v	typeref:struct:hash	file:
session	config.h	/^	struct hash ***session;$/;"	m	struct:user	typeref:struct:user::hash	access:public
session	session.c	/^void session(void *data)$/;"	f	signature:(void *data)
session	session.h	/^void session(void *data);$/;"	p	signature:(void *data)
session_mutex	session.c	/^static pthread_mutex_t session_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
session_parse	session.c	/^static void session_parse(struct hash ***arr, struct json_object *obj)$/;"	f	file:	signature:(struct hash ***arr, struct json_object *obj)
session_parse	session.c	/^static void session_parse(struct hash ***arr, struct json_object *obj);$/;"	p	file:	signature:(struct hash ***arr, struct json_object *obj)
set	hash.c	/^void set(struct hash ***arr, const char *key, const char *value)$/;"	f	signature:(struct hash ***arr, const char *key, const char *value)
set	hash.h	/^void set(struct hash ***arr, const char *key, const char *value);$/;"	p	signature:(struct hash ***arr, const char *key, const char *value)
short_options	main.c	/^const char short_options[] = "hde:p:";$/;"	v
sig_exit	main.c	/^static void sig_exit(int signo)$/;"	f	file:	signature:(int signo)
sig_exit	main.c	/^static void sig_exit(int signo);$/;"	p	file:	signature:(int signo)
sig_resize	screen_help.c	/^static void sig_resize(int signo)$/;"	f	file:	signature:(int signo)
sig_resize	screen_help.c	/^static void sig_resize(int signo);$/;"	p	file:	signature:(int signo)
sig_resize	screen_playlist.c	/^static void sig_resize(int signo)$/;"	f	file:	signature:(int signo)
sig_resize	screen_playlist.c	/^static void sig_resize(int signo);$/;"	p	file:	signature:(int signo)
sig_resize	screen_track.c	/^static void sig_resize(int signo)$/;"	f	file:	signature:(int signo)
sig_resize	screen_track.c	/^static void sig_resize(int sino);$/;"	p	file:	signature:(int sino)
sig_waitplay	fm.c	/^static void sig_waitplay(int signo)$/;"	f	file:	signature:(int signo)
sig_waitplay	fm.c	/^static void sig_waitplay(int signo);$/;"	p	file:	signature:(int signo)
station	main.c	/^struct hash **station;$/;"	v	typeref:struct:hash
stream	play.h	/^struct stream$/;"	s
stream::device	play.h	/^	ao_device *device;$/;"	m	struct:stream	access:public
stream::driver_id	play.h	/^	int driver_id;$/;"	m	struct:stream	access:public
stream::fmt	play.h	/^	ao_sample_format fmt;$/;"	m	struct:stream	access:public
stream::fp	play.h	/^	FILE *fp;$/;"	m	struct:stream	access:public
tcpsock	handler.c	/^int tcpsock(unsigned short port)$/;"	f	signature:(unsigned short port)
tcpsock	handler.h	/^int tcpsock(unsigned short port);$/;"	p	signature:(unsigned short port)
timeout_read	http.c	/^size_t timeout_read(int fd, char *buf, size_t size, int nsec)$/;"	f	signature:(int fd, char *buf, size_t size, int nsec)
timeout_read	http.h	/^size_t timeout_read(int fd, char *buf, size_t size, int nsec);$/;"	p	signature:(int fd, char *buf, size_t size, int nsec)
to_hex	http.c	/^static char to_hex(char ch)$/;"	f	file:	signature:(char ch)
to_hex	http.c	/^static char to_hex(char ch);$/;"	p	file:	signature:(char ch)
token	main.c	/^struct hash **token;$/;"	v	typeref:struct:hash
track	playlist.h	/^	struct hash **track;$/;"	m	struct:tracknode	typeref:struct:tracknode::hash	access:public
track	screen_track.c	/^static struct hash **track;$/;"	v	typeref:struct:hash	file:
trackinfo	util.c	/^char *trackinfo(const struct hash **track, const char *fmt, char *buf, int size)$/;"	f	signature:(const struct hash **track, const char *fmt, char *buf, int size)
trackinfo	util.h	/^char *trackinfo(const struct hash **track, const char *fmt, char *buf, int size);$/;"	p	signature:(const struct hash **track, const char *fmt, char *buf, int size)
tracknode	playlist.h	/^struct tracknode$/;"	s
tracknode::next	playlist.h	/^	struct tracknode *next;$/;"	m	struct:tracknode	typeref:struct:tracknode::tracknode	access:public
tracknode::track	playlist.h	/^	struct hash **track;$/;"	m	struct:tracknode	typeref:struct:tracknode::hash	access:public
url_decode	http.c	/^char *url_decode(const char *str)$/;"	f	signature:(const char *str)
url_decode	http.h	/^char *url_decode(const char *str);$/;"	p	signature:(const char *str)
url_encode	http.c	/^char *url_encode(const char *str)$/;"	f	signature:(const char *str)
url_encode	http.h	/^char *url_encode(const char *str);$/;"	p	signature:(const char *str)
usage	main.c	/^static void usage()$/;"	f	file:
usage	main.c	/^static void usage();$/;"	p	file:
user	config.h	/^struct user$/;"	s
user	main.c	/^static struct user user = { .session = &token, .email = { 0 }, .password = { 0 } };$/;"	v	typeref:struct:user	file:
user::email	config.h	/^	char email[32], password[32];$/;"	m	struct:user	access:public
user::password	config.h	/^	char email[32], password[32];$/;"	m	struct:user	access:public
user::session	config.h	/^	struct hash ***session;$/;"	m	struct:user	typeref:struct:user::hash	access:public
value	hash.c	/^const char *value(const struct hash **arr, const char *key)$/;"	f	signature:(const struct hash **arr, const char *key)
value	hash.h	/^	char *value;$/;"	m	struct:hash	access:public
value	hash.h	/^const char *value(const struct hash **hash, const char *key);$/;"	p	signature:(const struct hash **hash, const char *key)
win	screen_help.c	/^static WINDOW *win;$/;"	v	file:
win	screen_playlist.c	/^static WINDOW *win;$/;"	v	file:
win	screen_track.c	/^static WINDOW *win;$/;"	v	file:
